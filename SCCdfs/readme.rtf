{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw12240\paperh20160\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Implementation of Data Structures and Algorithms. \
SP10: Implementing Strongly Connected Components in a graph using DFS. \
\
Team Members:\
Shivani Mankotia(sxm180018)\
Akshay Kanduri (axk175430)\
\
Prerequisites:\
Eclipse Java \
Java(JDK) 8\
\
Create a java project and create 3 java classes in it under packages sxm180018 and rbk as follows: \
- package sxm180018\
	- DFS.java\
- package rbk\
	- Graph.java\
	- Timer.java\
Copy the codes from sxm180018>src folder into respective files above and execute DFS.java. \
\
Input: \
Sample Input is already given as: String string = "8 9  1 2 1  2 3 1  3 1 1  2 4 1  4 5 1  5 6 1  6 7 1  7 4 1  7 8 1";\
The above graph has 3 strongly connected components. \
}